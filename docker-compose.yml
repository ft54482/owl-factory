version: '3.8'

services:
  # 前端服务
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    environment:
      - VITE_API_URL=http://backend:8000
      - VITE_SUPABASE_URL=${SUPABASE_URL}
      - VITE_SUPABASE_ANON_KEY=${SUPABASE_ANON_KEY}
    volumes:
      - ./frontend:/app
      - /app/node_modules
    depends_on:
      - backend
    networks:
      - owl-factory-network

  # 后端服务
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    ports:
      - "8000:8000"
    environment:
      - ENVIRONMENT=production
      - SUPABASE_URL=${SUPABASE_URL}
      - SUPABASE_ANON_KEY=${SUPABASE_ANON_KEY}
      - SUPABASE_SERVICE_ROLE_KEY=${SUPABASE_SERVICE_ROLE_KEY}
      - JWT_SECRET_KEY=${JWT_SECRET_KEY}
      - REDIS_URL=redis://redis:6379
    volumes:
      - ./backend:/app
      - ./logs:/app/logs
      - ./reports:/app/reports
      - ./uploads:/app/uploads
    depends_on:
      - redis
      - postgres
    networks:
      - owl-factory-network

  # Redis 缓存服务
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    networks:
      - owl-factory-network

  # PostgreSQL 数据库 (备用，主要使用Supabase)
  postgres:
    image: postgres:15-alpine
    environment:
      - POSTGRES_DB=owl_factory
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - owl-factory-network

  # Nginx 反向代理
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
    depends_on:
      - frontend
      - backend
    networks:
      - owl-factory-network

  # GPU 监控服务
  gpu-monitor:
    build:
      context: ./gpu-cluster
      dockerfile: Dockerfile.monitor
    environment:
      - REDIS_URL=redis://redis:6379
      - GPU_SERVERS=${GPU_SERVERS}
    volumes:
      - ./gpu-cluster:/app
      - ./logs:/app/logs
    depends_on:
      - redis
    networks:
      - owl-factory-network

  # 任务队列工作进程
  task-worker:
    build:
      context: ./backend
      dockerfile: Dockerfile.worker
    environment:
      - ENVIRONMENT=production
      - SUPABASE_URL=${SUPABASE_URL}
      - SUPABASE_SERVICE_ROLE_KEY=${SUPABASE_SERVICE_ROLE_KEY}
      - REDIS_URL=redis://redis:6379
      - GPU_SERVERS=${GPU_SERVERS}
    volumes:
      - ./backend:/app
      - ./logs:/app/logs
      - ./reports:/app/reports
    depends_on:
      - redis
      - backend
    deploy:
      replicas: 2
    networks:
      - owl-factory-network

  # 日志收集服务
  logstash:
    image: docker.elastic.co/logstash/logstash:8.8.0
    volumes:
      - ./logs:/usr/share/logstash/logs
      - ./config/logstash.conf:/usr/share/logstash/pipeline/logstash.conf
    environment:
      - "LS_JAVA_OPTS=-Xmx256m -Xms256m"
    networks:
      - owl-factory-network

  # 监控面板
  grafana:
    image: grafana/grafana:latest
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./config/grafana:/etc/grafana/provisioning
    networks:
      - owl-factory-network

  # 指标收集
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./config/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
    networks:
      - owl-factory-network

volumes:
  redis_data:
  postgres_data:
  grafana_data:
  prometheus_data:

networks:
  owl-factory-network:
    driver: bridge